AWSTemplateFormatVersion: '2010-09-09'
Description: A template to create AWS resources for a web application.

Parameters:
  EnvironmentName:
    Type: String
    Default: nice
    Description: The name to be used for naming resources.

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'
    Description: The ID of the latest Amazon Machine Image (AMI).

  InstanceType:
    Description: 'Type of the instance that will be created'
    Type: 'String'
    Default: 't3.small'
    Description: The type of EC2 instance to be launched.

Resources:
  # KeyPair
  NiceKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub '${EnvironmentName}-keypair'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-keypair'
    Description: EC2 Key Pair for SSH access.

  # VPC
  NiceVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
    Description: Virtual Private Cloud (VPC) for the web application.

  # Internet Gateway
  NiceInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-igw'
    Description: Internet Gateway for public internet access.

  # Attach Internet Gateway to VPC
  NiceVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref NiceVPC
      InternetGatewayId: !Ref NiceInternetGateway
    Description: Attach Internet Gateway to VPC.

  # Public Route Table
  NicePublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NiceVPC
    Description: Public route table for the web application.

  # Route to Internet Gateway
  NiceRoute:
    Type: AWS::EC2::Route
    DependsOn: NiceVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref NicePublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NiceInternetGateway
    Description: Route to the Internet through the Internet Gateway.

  # Subnets
  NiceSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NiceVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-subnet1'
    Description: Public subnet 1.

  NiceSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NiceVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-subnet2'
    Description: Public subnet 2.
  
  # Associate Subnet1 with Public Route Table
  NiceSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref NiceSubnet1
      RouteTableId: !Ref NicePublicRouteTable

  # Associate Subnet2 with Public Route Table
  NiceSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref NiceSubnet2
      RouteTableId: !Ref NicePublicRouteTable

  # Security Group
  NiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for nice application'
      VpcId: !Ref NiceVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-sg'
    Description: Security group for the web application.

  # ECR Repository
  NiceECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref EnvironmentName
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
    Description: Elastic Container Registry (ECR) repository.

  # ECS Cluster
  NiceECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref EnvironmentName
    Description: ECS Cluster for containerized applications.

  # IAM Role for ECS Tasks
  NiceECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${EnvironmentName}-TaskRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
    Description: IAM Role for ECS tasks.

  # ECS Instance Profile
  NiceECSInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - Ref: NiceECSTaskRole
    Description: Instance profile for ECS tasks.
  
  # Application Load Balancer
  NiceECSALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-alb
      Subnets:
        - !Ref NiceSubnet1
        - !Ref NiceSubnet2
      SecurityGroups: [!Ref NiceSecurityGroup]
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            StatusCode: "200"
      LoadBalancerArn: !Ref NiceECSALB
      Port: 80
      Protocol: HTTP
    Description: ALB listener for the web application.

  # ALB Listener Rule
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: "text/plain"
            StatusCode: "200"
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      ListenerArn: !Ref ALBListener
      Priority: 1

  # Target Group
  NiceECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref NiceVPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      UnhealthyThresholdCount: 3

Outputs:
  ECSTaskRoleArn:
    Description: The ARN of the ECS Task Role
    Value: !GetAtt NiceECSTaskRole.Arn
    Export:
      Name: !Sub '${EnvironmentName}-ECSTaskRoleArn'

  VPCId:
    Description: The ID of the VPC
    Value: !Ref NiceVPC
    Export:
      Name: !Sub '${EnvironmentName}-VPCId'

  SecurityGroupId:
    Description: The ID of the security group
    Value: !Ref NiceSecurityGroup
    Export:
      Name: !Sub '${EnvironmentName}-SecurityGroupId'

  ECRRepositoryUri:
    Description: The URI of the ECR repository
    Value: !GetAtt NiceECRRepository.RepositoryUri
    Export:
      Name: !Sub '${EnvironmentName}-ECRRepositoryUri'

  ECSCluster:
    Description: The name of the ECS cluster
    Value: !Ref NiceECSCluster
    Export:
      Name: !Sub '${EnvironmentName}-ECSCluster'

  NiceSubnet1:
    Description: The ID of the first subnet
    Value: !Ref NiceSubnet1
    Export:
      Name: !Sub '${EnvironmentName}-NiceSubnet1'

  NiceSubnet2:
    Description: The ID of the second subnet
    Value: !Ref NiceSubnet2
    Export:
      Name: !Sub '${EnvironmentName}-NiceSubnet2'

  ECSALBName:
    Description: "Name of the ALB"
    Value: !Ref NiceECSALB
  
  ECSALBEndpoint:
    Description: "ALB DNS Name"
    Value: !GetAtt NiceECSALB.DNSName
  
  ApplicationURL:
    Description: URL of the deployed Python application.
    Value: !Sub 'http://${NiceECSALB.DNSName}/'
  
  NiceKeyPairName:
    Description: The name of the EC2 Key Pair
    Value: !Ref NiceKeyPair

  NiceVPCName:
    Description: The name of the VPC
    Value: !Ref NiceVPC

  NiceInternetGatewayName:
    Description: The name of the Internet Gateway
    Value: !Ref NiceInternetGateway

  NiceECSClusterArn:
    Description: The ARN of the ECS Cluster
    Value: !GetAtt NiceECSCluster.Arn
    Export:
      Name: !Sub '${EnvironmentName}-ECSClusterArn'

  NiceECRRepositoryName:
    Description: The name of the ECR Repository
    Value: !Ref NiceECRRepository